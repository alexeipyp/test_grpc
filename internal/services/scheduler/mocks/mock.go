// Code generated by MockGen. DO NOT EDIT.
// Source: scheduler.go
//
// Generated by this command:
//
//	mockgen -source=scheduler.go -destination=mocks/mock.go
//
// Package mock_schedulerservice is a generated GoMock package.
package mock_schedulerservice

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTaskQueuer is a mock of TaskQueuer interface.
type MockTaskQueuer struct {
	ctrl     *gomock.Controller
	recorder *MockTaskQueuerMockRecorder
}

// MockTaskQueuerMockRecorder is the mock recorder for MockTaskQueuer.
type MockTaskQueuerMockRecorder struct {
	mock *MockTaskQueuer
}

// NewMockTaskQueuer creates a new mock instance.
func NewMockTaskQueuer(ctrl *gomock.Controller) *MockTaskQueuer {
	mock := &MockTaskQueuer{ctrl: ctrl}
	mock.recorder = &MockTaskQueuerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskQueuer) EXPECT() *MockTaskQueuerMockRecorder {
	return m.recorder
}

// Enqueue mocks base method.
func (m *MockTaskQueuer) Enqueue(task func()) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enqueue", task)
	ret0, _ := ret[0].(error)
	return ret0
}

// Enqueue indicates an expected call of Enqueue.
func (mr *MockTaskQueuerMockRecorder) Enqueue(task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enqueue", reflect.TypeOf((*MockTaskQueuer)(nil).Enqueue), task)
}
